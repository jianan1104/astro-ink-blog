[{"slug":"5個超棒的漸層設計工具","category":"blog","title":"5個超棒的漸層設計工具","description":"好用的漸層工具讓你的設計更快速美好","tags":["gradient","ui","tool"],"body":"1. [Gradienta](https://gradienta.io/)\n\n   預設182種精心設計的漸層圖案，免費下載JPG與完整的CSS程式碼\n\n   ![Gradient](/images/uploads/截圖-2022-05-15-上午12.56.46.png \"Gradient\")\n2. [Gradientfy](https://www.iconshock.com/svg-icons/)\n\n   可自定義顏色的漸層圖標資源包，可免費下載PNG檔\n\n   ![Gradientfy](/images/uploads/截圖-2022-05-15-上午1.01.40.png \"Gradientfy screenshot\")\n3. [Mesh Gradient](https://meshgradient.com/)\n\n   看起來好潮的漸層背景，支持編輯顏色與漸層方向\n\n   ![Mesh Gradient](/images/uploads/截圖-2022-05-15-上午1.07.08.png \"Mesh Gradient\")\n4. [Grabient](https://www.grabient.com/)\n\n   多種好看的線性漸層背景，可編輯顏色與漸層方向\n\n   ![Grabient](/images/uploads/截圖-2022-05-15-上午1.08.45.png \"Grabient\")\n5. [](https://www.grabient.com/)[Coolors Gradients](https://coolors.co/gradients)\n\n   配色工具ㄉCoolros也推出了漸層設計功能，讓你的做出好看的漸層色，不用再煩惱配色問題\n\n   ![Coolors Gradient](/images/uploads/截圖-2022-05-15-上午1.10.16.png \"Coolors Gradient\")"},{"slug":"C++ Template 範例","category":"blog","title":"C++ Template 範例","description":"C/C++ Template 範例，實現不同變數類型的簡單加減法","tags":["c","c++"],"body":"```cpp\n#include <iostream>\nusing namespace std;\n\ntemplate<class T>\nclass math {\n    private:\n        T a;\n        T b;\n    public:\n        math(T a, T b);\n        T add();\n        T sub();\n};\n\ntemplate<class T>\nmath<T>::math(T a, T b){\n    this->a = a;\n    this->b = b;\n};\ntemplate<class T>\nT math<T>::add(){\n    return a + b;\n};\ntemplate<class T>\nT math<T>::sub(){\n    return a - b;\n};\n\nint main(int argc, const char * argv[]) {\n    math<int> m1(10,5);\n    math<float> m2(2.5,0.5);\n    cout << m1.add() << endl << m1.sub() << endl;\n    cout << m2.add() << endl << m2.sub() << endl;\n    return 0;\n}\n```"},{"slug":"exponential-function-using-recursion","category":"blog","title":"Exponential Function Using Recursion","description":"使用遞迴實現指數函數方法","tags":["c","c++"],"body":"\n\n```c\ndouble e(int m, int n){\n    double r;\n    static double p = 1, f = 1;\n    if (n==0) {\n        return 1;\n    } else {\n        r = e(m, n-1);\n        p = p*m;\n        f = f*n;\n        return r + p/f;\n    }\n}\n\nint main(int argc, const char * argv[]) {\n    printf(\"%lf\\n\", e(1,10));\n    return 0;\n}\n\n```\n\nUse horner's rule\n===\n```c\ndouble e(int m, int n){\n    static double s = 1;\n    if(n==0){\n        return s;\n    } else {\n        s = 1 + m*s/n;\n        return e(m, n-1);\n    }\n}\n\nint main(int argc, const char * argv[]) {\n    printf(\"%lf\\n\", e(1,10));\n    return 0;\n}\n```\n\nOutput\n===\n```bash\n2.718282\nProgram ended with exit code: 0\n```"},{"slug":"factorial-using-recursion","category":"blog","title":"Factorial Using Recursion","description":"使用遞迴實現階乘運算","tags":["c","c++"],"body":"\n\n```c\n#include <stdio.h>\n\nint factorial(int n){\n    if (n==0) {\n        return 1;\n    } else {\n        return factorial(n-1)*n;\n    }\n}\n\nint main(int argc, const char * argv[]) {\n    int num = 5;\n    printf(\"%d\\n\", factorial(num));\n    return 0;\n}\n\n```"},{"slug":"fibonacci-using-recursioin","category":"blog","title":"Fibonacci Using Recursioin","description":"使用遞迴實現斐波那契函數","tags":["c","c++"],"body":"---\n\n\n```c\n#include <stdio.h>\n\nint Fibo(int n){\n   if(n<=1)\n       return n;\n   else\n       return Fibo(n-2) + Fibo(n-1);\n}\n\nint main(int argc, const char * argv[]) {\n    for(int i=0;i<10;i++)\n        F[i] = -1;\n    printf(\"%d\\n\", Fibo(5));\n    return 0;\n}\n\n```\n\nUsing memorisation\n===\n```c\n#include <stdio.h>\n\nint F[10];\nint Fibo(int n){\n    if (n<=1) {\n        F[n] = n;\n        return F[n];\n    } else {\n        if(F[n-2] == -1)\n            F[n-2] = Fibo(n-2);\n        if(F[n-1] == -1)\n            F[n-1] = Fibo(n-1);\n        return F[n-2] + F[n-1];\n    }\n}\nint main(int argc, const char * argv[]) {\n    for(int i=0;i<10;i++)\n        F[i] = -1;\n    printf(\"%d\\n\", Fibo(5));\n    return 0;\n}\n\n```"},{"slug":"how-to-kill-port","category":"blog","title":"如何終止當前使用本地主機上的端口的進程","description":"在進行本地開發時，需要透過本地端口建立伺服器連線進行預覽或測試，碰到端口(port)佔用時該如何解決呢？","tags":["devops","bash"],"body":"\n:::tip 發生什麼事？\n在進行本地開發時，需要透過本地端口建立伺服器連線進行預覽或測試，碰到端口(port)佔用時該如何解決呢？\n:::\n\n### For Windows user\n\n#### Step 1 找到佔用此端口的進程PID\n\n``` bash\n$ netstat -ano | findstr:PortNumber\n```\n\n想知道更多關於: [netstat](https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/netstat)、[findstr](https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/findstr)\n\n#### Step 2 清除該進程\n\n``` bash\n$ taskkill /PID typeyourPIDhere /F\n```\n\n想知道更多關於: [taskkill](https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/taskkill)\n\n### For Unix user\n\n#### Step 1 找到佔用此端口的進程PID\n\n``` bash\n$ lsof -i:PortNumber \n```\n\n想知道更多關於: [lsof](https://man7.org/linux/man-pages/man8/lsof.8.html)\n\n#### Step 2 清除該進程\n\n``` bash\n$ kill typeyourPIDhere \n```\n\n想知道更多關於: [kill](https://man7.org/linux/man-pages/man1/kill.1.html)\n\n\n"},{"slug":"leetcode-easy-number","category":"blog","title":"Leetcode - Palindrome Number(Easy)","description":"Leetcode第九題 Palindrome Number 解法","tags":["javascript","leetcode"],"body":"\nNo.9 Palindrome Number\n---\n\n:::tip Problem\nGiven an integer x, return true if x is palindrome integer.\n\nAn integer is a palindrome when it reads the same backward as forward. For example, 121 is palindrome while 123 is not.\n:::\n\n\n簡單來說，題目給定整數x，只要順著與反著順序相同回傳True反之Fasle。\n\n解題思路\n===\n在做任何題目之前，千萬別著急開始coding，應當先理清題目與**假設**會遇到的情況，將解題流程拆分成數個條件，再來寫程式與測試。\n\n\n- 條件一 x 不能為負 \n  - 正反順序相同，前面若是配上個`-`負號就不能通過，所以x <  0則return false\n\n- 條件二 頭尾需相同\n  - 正反順序相同，意味著頭與尾是同個數字，所以檢測頭尾是否相同，不同則return false\n\n- 條件三 須符合鏡射\n  - 正反順序相同，也就代表以該數中間為中心，左右數字需對稱，所以若不符合鏡射則return false\n\nmy solution\n===\n\n```javascript\n/**\n * @param {number} x\n * @return {boolean}\n */\nvar isPalindrome = function(x) {\n  const array = x.toString();\n  const len = array.length;\n  if(x < 0 || array[0] !== array[len-1]) \n    return false\n  else {\n    for(let i = 1; i < (len-1) / 2 + 1; i++) \n      if(array[i-1] !== array[Math.abs(i-len)]) \n        return false\n    return true\n  }\n};\n```\n\n想知道更多關於: [toString](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/toString), [length](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/length)\n, [abs](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Math/abs)\n\n\n"},{"slug":"power-using-recursion","category":"blog","title":"Power Using Recursion","description":"使用遞迴實現次方運算","tags":["c","c++"],"body":"\n\n\n```c\nint power(int m, int n){\n   if(n==0)\n       return 1;\n   else\n       return power(m, n-1)*m;\n}\n\nint main(int argc, const char * argv[]) {\n    printf(\"%d\\n\", power(2, 5));\n    return 0;\n}\n\n```\n\nFaster solution\n===\n```c\nint power(int m, int n){\n    if(n==0)\n        return 1;\n    if(n%2==0)\n        return power(m*m, n/2);\n    else\n        return m*power(m*m, (n-1)/2);\n}\n\nint main(int argc, const char * argv[]) {\n    printf(\"%d\\n\", power(2, 5));\n    return 0;\n}\n```"},{"slug":"sum-of-n-using-recursion","category":"blog","title":"Sum of N Using Recursion","description":"使用遞迴實現總和運算","tags":["c","c++"],"body":"\n```c\n#include <stdio.h>\n\nint sum(int n){\n    if (n==0) {\n        return 0;\n    } else {\n        return sum(n-1)+n;\n    }\n}\n\nint main(int argc, const char * argv[]) {\n    int num = 5;\n    printf(\"%d \", sum(num));\n    return 0;\n}\n```"},{"slug":"v-if-v-show","category":"blog","title":"v-if與v-show有什麼不同？","description":"使用v-if和v-show看起來好像沒差別，事實上影響著渲染的效能！","tags":["vue","frontend"],"body":"\n\n:::tip 發生什麼事？\n同樣是作為內容呈現邏輯判斷的樣板指令，究竟有何不同？什麼時候該用哪個？\n:::\n\n\nv-if 的特性\n===\n> 透過v-if指令計算出為false，則***不會輸出***到DOM中。\n\n\n程式原始碼:\n```html\n<div v-if=\"true\">one</div>\n<div v-if=\"false\">two</div>\n```\n\n實際輸出:\n```html\n<div>one</div>\n```\n\n\nv-show 的特性\n===\n> 透過v-show指令計算出為false，則**透過CSS將該元素隱藏**。\n\n\n程式原始碼:\n```html\n<div v-show=\"true\">one</div>\n<div v-show=\"false\">two</div>\n```\n\n實際輸出:\n```html\n<div>one</div>\n<div style=\"display: none;\">two</div>\n```\n\n> 雖然使用者都會看到相同的畫面，但實際存在著差異，v-if不會產生完整的HTML，v-show則透過CSS進行隱藏，所以v-if適用於還未透過ajax下載的資料，v-show用於對已存在的資料進行顯示與隱藏。\n\n想知道更多關於: [v-if v.s. v-show](https://vuejs.org/v2/guide/conditional.html#v-if-vs-v-show)"},{"slug":"vue-create-component","category":"blog","title":"Vue Component介紹","description":"30秒創建一個簡單的Vue元件！","tags":["vue","frontend"],"body":"\n\n:::tip 什麼是component?\n元件(component)是一段獨立的程式碼，代表網頁的一部份。元件有自己的資料與Javascript，通常也帶有自己的樣式。可以包含其他的元件，也能彼此進行溝通。元件可以是按鈕或是圖示，也可以是能在整個網站或網頁中重複使用的表單這種大元素。\n:::\n\n\n元件基礎\n===\n\n撰寫一個間單的元件\n```javascript\nconst SimpleButton = {\n    template: <button>Simple button</button>\n}\n```\n接下來可以透過 components物件將這個元件傳進app中\n\n```javascript\n<script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.14/dist/vue.js\"></script>\n<div id=\"app\">\n    <simple-button></simple-button>\n</div>\n<script>\n    const SimpleButton = {\n        template: '<button>Simple Button</button>'\n    };\n    new Vue({\n        el: '#app',\n        components: {\n            SimpleButton\n        }\n    });\n</script>\n```\n\n也可以透過全域的方式註冊元件\n\n```javascript\nVue.component('simple-button', {\n    template: 'button>Simple Button</button>'\n})\n```\n\n"},{"slug":"超常用的Unix指令-ls","category":"blog","title":"超常用的Unix指令-ls","description":"Unix指令-顯示指定目錄下的檔案清單與訊息","tags":["windows","mac","unix","bash"],"body":"\n\n> 不管是什麼類型的工程師，都必須跟終端機(Terminal)好好相處，查看目錄`ls`我想是大家第一個學的Unix指令，以下是我常用的用法。\n\n\n\nls 基本用法\n===\n\n```bash\n$ ls \n```\n![ls 基本用法](/images/uploads/f69b45f945fc1f1306866ea973ca61eeb4508d0364038697045f2462ba1cb700.png)  \n\n\n以清單模式顯示\n===\n```bash\n$ ls -l\n```\n![以清單模式顯示](/images/uploads/00a6c6f865c97f6b6a43fc90df4c9f183d20a3c3dda5099ffe1b4bad8e7fb2d5.png)  \n\n\n顯示隱藏檔案\n===\n```bash\n$ ls -a\n```\n![顯示隱藏檔案](/images/uploads/deefc4eb3c3e957ef3a193b80904e99521153b1a287b2bdcd1a689ee40df88e4.png)  \n\n以時間排序\n===\n```bash\n$ ls -ltr\n```\n![以時間排序](/images/uploads/16119d3502a26a2108c7eccef4fe8ffed7d2aec790d4ec8a6b922212b3ac9da7.png)  \n\n以檔案大小排序\n===\n```bash\n$ ls -lS\n```\n![以檔案大小排序](/images/uploads/34eadbfa2e1241f59eb0a8f1dfc64e6fbc2764632371c9e2bb9437503a1ef15a.png)  \n\n\n想知道更多關於: [ls](https://man7.org/linux/man-pages/man1/ls.1.html)\n\n"}]